package main

var implTpl = `
// Code generated by thrift-gen-kitex-relfect. DO NOT EDIT.
package {{ .PkgName }}

import (
	"context"
	"encoding/json"
	"fmt"
	"runtime/debug"
	"sync"

	idl "github.com/jxskiss/kitex-reflect/kitex_gen/kitexreflectidl"
)

var pluginReflectImpl = struct {
	genTime string

	checkReqAndRespOnce sync.Once

	payloadOnce sync.Once
	err         error
	payload     []byte
}{
	genTime: "{{ .GenTime }}",
}

func ServeReflectServiceRequest(ctx context.Context, req interface{}, resp interface{}) error {
	pluginReflectImpl.checkReqAndRespOnce.Do(func() {
		err := idl.CheckReflectReqAndRespType(req, resp)
		if err != nil {
			pluginReflectImpl.err = err
		}
	})
	if err := pluginReflectImpl.err; err != nil {
		return err
	}
	payload, err := GetReflectServiceRespPayload(ctx)
	if err != nil {
		return err
	}
	resp.(interface {
		SetPayload(val []byte)
	}).SetPayload(payload)
	return nil
}

func GetReflectServiceRespPayload(ctx context.Context) ([]byte, error) {
	pluginReflectImpl.payloadOnce.Do(func() {
		err := buildPluginReflectRespPayload()
		if err != nil {
			pluginReflectImpl.err = err
		}
	})
	if err := pluginReflectImpl.err; err != nil {
		return nil, err
	}
	return pluginReflectImpl.payload, nil
}

func buildPluginReflectRespPayload() error {
	vcsRev := "unknown"
	buildInfo, ok := debug.ReadBuildInfo()
	if ok {
		for _, setting := range buildInfo.Settings {
			if setting.Key == "vcs.revision" && setting.Value != "" {
				vcsRev = setting.Value
			}
		}
	}
	version := fmt.Sprintf("%s/%s", pluginReflectImpl.genTime, vcsRev)
	payload := &idl.ReflectServiceRespPayload{
		Version:     version,
		ServiceDesc: &idl.ServiceDesc{},
	}

	svcDescJSON := {{ .GenServiceDesc }}
	err := json.Unmarshal([]byte(svcDescJSON), payload.ServiceDesc)
	if err != nil {
		return fmt.Errorf("cannot unmarshal service descriptor: %w", err)
	}

	pluginReflectImpl.payload, err = idl.MarshalReflectServiceRespPayload(payload)
	if err != nil {
		return fmt.Errorf("cannot marshal ReflectServiceRespPayload: %w", err)
	}
	return nil
}
`
