// Code generated by thrift-gen-kitex-reflect. DO NOT EDIT.
package reflectionservice

import (
	"context"
	"fmt"
	"runtime/debug"
	"sync"

	idl "github.com/jxskiss/kitex-reflect/kitex_gen/kitexreflectidl"
)

var pluginReflectImpl = struct {
	genTime string

	once    sync.Once
	err     error
	version string
}{
	genTime: "20221231110911",
}

func ServeReflectServiceRequest(ctx context.Context, req interface{}, resp interface{}) error {
	impl := &pluginReflectImpl
	impl.once.Do(func() {
		err := idl.CheckReflectReqAndRespType(req, resp)
		if err != nil {
			impl.err = err
			return
		}
		vcsRev := "unknown"
		buildInfo, ok := debug.ReadBuildInfo()
		if ok {
			for _, setting := range buildInfo.Settings {
				if setting.Key == "vcs.revision" && setting.Value != "" {
					vcsRev = setting.Value
				}
			}
		}
		impl.version = fmt.Sprintf("%s/%s", impl.genTime, vcsRev)
	})
	if err := impl.err; err != nil {
		return err
	}

	reqPayload, err := idl.UnmarshalReflectServiceReqPayload(req.(interface {
		GetPayload() []byte
	}).GetPayload())
	if err != nil {
		return fmt.Errorf("cannot unmarshal ReflectServiceReqPayload: %w", err)
	}
	var reqVersionTime = ""
	if len(reqPayload.ClientIDLVersion) > 14 {
		reqVersionTime = reqPayload.ClientIDLVersion[:14]
	}

	respPayload := &idl.ReflectServiceRespPayload{
		Version: impl.version,
		IDL:     nil,
	}
	if reqVersionTime != impl.genTime {
		respPayload.IDL = pluginReflectIDLRaw
	}
	payloadBuf, err := idl.MarshalReflectServiceRespPayload(respPayload)
	if err != nil {
		return fmt.Errorf("cannot marshal ReflectServiceRespPayload: %w", err)
	}
	resp.(interface {
		SetPayload(val []byte)
	}).SetPayload(payloadBuf)
	return nil
}

func GetIDLGzipBytes() []byte {
	return pluginReflectIDLRaw
}

var pluginReflectIDLRaw = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xbc, 0x93, 0xcd, 0x4e, 0xeb, 0x30,
	0x10, 0x85, 0x4f, 0x9c, 0x36, 0xf1, 0xad, 0xdb, 0x1b, 0x58, 0x80, 0xe0, 0x25, 0x78, 0x09, 0xba,
	0xa9, 0xd4, 0x05, 0x2a, 0x12, 0xfb, 0xd2, 0xb8, 0xc5, 0x22, 0x72, 0xc0, 0x71, 0x11, 0x7d, 0x7b,
	0xe4, 0x8c, 0x0b, 0xf9, 0x71, 0xba, 0x40, 0x80, 0xba, 0x18, 0xd9, 0x9e, 0x39, 0xfd, 0xce, 0x4c,
	0x46, 0x20, 0x02, 0x30, 0x51, 0x79, 0x71, 0x63, 0x9f, 0x8c, 0xda, 0xda, 0x0c, 0x6c, 0x0a, 0x00,
	0x19, 0x62, 0x41, 0x71, 0xe4, 0xce, 0x11, 0x25, 0xb2, 0x5d, 0x29, 0xc0, 0xdc, 0xf5, 0xb3, 0xb2,
	0xf2, 0xdd, 0xc8, 0x6d, 0x21, 0x37, 0x56, 0xe5, 0x45, 0x86, 0xb8, 0x2e, 0x43, 0x86, 0xb1, 0xaf,
	0x4f, 0x7c, 0x4c, 0x7d, 0xe4, 0x2e, 0x8e, 0x48, 0x27, 0xa9, 0xac, 0xd9, 0x6f, 0x2c, 0x69, 0x5d,
	0xad, 0x48, 0xe6, 0x5e, 0x9a, 0x37, 0xb5, 0x91, 0x2b, 0xf9, 0x7a, 0xb7, 0x3e, 0x14, 0xe5, 0x3a,
	0xf7, 0xa2, 0x11, 0xaf, 0x6b, 0x22, 0xca, 0x3e, 0xbb, 0x2d, 0x94, 0xd4, 0x76, 0x31, 0x5f, 0x3e,
	0x48, 0x53, 0xa9, 0x52, 0x73, 0xc4, 0xee, 0x0f, 0xa6, 0x4d, 0x6d, 0xa5, 0x77, 0x02, 0xa3, 0x26,
	0x0f, 0x47, 0x02, 0x20, 0xfd, 0xe4, 0x12, 0x48, 0xd1, 0xf0, 0x07, 0x81, 0x31, 0x28, 0xf6, 0xf8,
	0xae, 0xbb, 0x7c, 0xd5, 0x4b, 0x1b, 0x90, 0xb5, 0x00, 0xd3, 0x1f, 0xe1, 0x22, 0x49, 0x46, 0x92,
	0xf1, 0x62, 0xbe, 0xec, 0xc9, 0x3d, 0x2a, 0xbd, 0x36, 0x87, 0xa0, 0x1c, 0xff, 0x8e, 0xcd, 0x8b,
	0xde, 0x18, 0xf6, 0xb2, 0xb2, 0xc1, 0x19, 0xa4, 0xde, 0xff, 0xaf, 0x33, 0x5d, 0xf6, 0x5b, 0x5f,
	0xea, 0x4a, 0xfe, 0x21, 0x54, 0x86, 0x7f, 0xfe, 0xfb, 0x9d, 0xf8, 0x28, 0x1a, 0xfb, 0x70, 0xee,
	0xf9, 0x54, 0xa9, 0x3d, 0x22, 0xb1, 0xe0, 0x48, 0x48, 0x69, 0xff, 0xdb, 0x36, 0x18, 0xdc, 0x2f,
	0xfe, 0x42, 0x1c, 0xb0, 0x19, 0x44, 0x9e, 0x1d, 0xcf, 0x1d, 0xf7, 0x86, 0xe6, 0xd5, 0x75, 0x1f,
	0x9e, 0xea, 0xa0, 0x72, 0xb7, 0x19, 0xed, 0x25, 0x16, 0xe0, 0x9d, 0x26, 0x25, 0xf5, 0x79, 0x86,
	0xa9, 0x70, 0x2f, 0xe3, 0x60, 0x4b, 0xdc, 0xe5, 0xa9, 0x35, 0xaf, 0x05, 0x4e, 0xad, 0x99, 0x4f,
	0x08, 0x5b, 0xf1, 0x8f, 0x03, 0x2d, 0xac, 0x5f, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xc7,
	0x86, 0xab, 0xe5, 0x04, 0x00, 0x00,
}
