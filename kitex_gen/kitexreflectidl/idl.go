// Code generated by thriftgo (0.2.4). DO NOT EDIT.

package kitexreflectidl

import (
	"bytes"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Type int64

const (
	Type_STOP   Type = 0
	Type_VOID   Type = 1
	Type_BOOL   Type = 2
	Type_BYTE   Type = 3
	Type_DOUBLE Type = 4
	Type_I16    Type = 6
	Type_I32    Type = 8
	Type_I64    Type = 10
	Type_STRING Type = 11
	Type_STRUCT Type = 12
	Type_MAP    Type = 13
	Type_SET    Type = 14
	Type_LIST   Type = 15
	Type_UTF8   Type = 16
	Type_UTF16  Type = 17
	Type_JSON   Type = 19
)

func (p Type) String() string {
	switch p {
	case Type_STOP:
		return "STOP"
	case Type_VOID:
		return "VOID"
	case Type_BOOL:
		return "BOOL"
	case Type_BYTE:
		return "BYTE"
	case Type_DOUBLE:
		return "DOUBLE"
	case Type_I16:
		return "I16"
	case Type_I32:
		return "I32"
	case Type_I64:
		return "I64"
	case Type_STRING:
		return "STRING"
	case Type_STRUCT:
		return "STRUCT"
	case Type_MAP:
		return "MAP"
	case Type_SET:
		return "SET"
	case Type_LIST:
		return "LIST"
	case Type_UTF8:
		return "UTF8"
	case Type_UTF16:
		return "UTF16"
	case Type_JSON:
		return "JSON"
	}
	return "<UNSET>"
}

func TypeFromString(s string) (Type, error) {
	switch s {
	case "STOP":
		return Type_STOP, nil
	case "VOID":
		return Type_VOID, nil
	case "BOOL":
		return Type_BOOL, nil
	case "BYTE":
		return Type_BYTE, nil
	case "DOUBLE":
		return Type_DOUBLE, nil
	case "I16":
		return Type_I16, nil
	case "I32":
		return Type_I32, nil
	case "I64":
		return Type_I64, nil
	case "STRING":
		return Type_STRING, nil
	case "STRUCT":
		return Type_STRUCT, nil
	case "MAP":
		return Type_MAP, nil
	case "SET":
		return Type_SET, nil
	case "LIST":
		return Type_LIST, nil
	case "UTF8":
		return Type_UTF8, nil
	case "UTF16":
		return Type_UTF16, nil
	case "JSON":
		return Type_JSON, nil
	}
	return Type(0), fmt.Errorf("not a valid Type string")
}

func TypePtr(v Type) *Type { return &v }
func (p *Type) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Type(result.Int64)
	return
}

func (p *Type) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BuiltinType int64

const (
	BuiltinType_NOT_BUITIN BuiltinType = 0
	BuiltinType_VOID       BuiltinType = 1
	BuiltinType_BOOL       BuiltinType = 2
	BuiltinType_BYTE       BuiltinType = 3
	BuiltinType_I8         BuiltinType = 4
	BuiltinType_I16        BuiltinType = 5
	BuiltinType_I32        BuiltinType = 6
	BuiltinType_I64        BuiltinType = 7
	BuiltinType_DOUBLE     BuiltinType = 8
	BuiltinType_STRING     BuiltinType = 9
	BuiltinType_BINARY     BuiltinType = 10
)

func (p BuiltinType) String() string {
	switch p {
	case BuiltinType_NOT_BUITIN:
		return "NOT_BUITIN"
	case BuiltinType_VOID:
		return "VOID"
	case BuiltinType_BOOL:
		return "BOOL"
	case BuiltinType_BYTE:
		return "BYTE"
	case BuiltinType_I8:
		return "I8"
	case BuiltinType_I16:
		return "I16"
	case BuiltinType_I32:
		return "I32"
	case BuiltinType_I64:
		return "I64"
	case BuiltinType_DOUBLE:
		return "DOUBLE"
	case BuiltinType_STRING:
		return "STRING"
	case BuiltinType_BINARY:
		return "BINARY"
	}
	return "<UNSET>"
}

func BuiltinTypeFromString(s string) (BuiltinType, error) {
	switch s {
	case "NOT_BUITIN":
		return BuiltinType_NOT_BUITIN, nil
	case "VOID":
		return BuiltinType_VOID, nil
	case "BOOL":
		return BuiltinType_BOOL, nil
	case "BYTE":
		return BuiltinType_BYTE, nil
	case "I8":
		return BuiltinType_I8, nil
	case "I16":
		return BuiltinType_I16, nil
	case "I32":
		return BuiltinType_I32, nil
	case "I64":
		return BuiltinType_I64, nil
	case "DOUBLE":
		return BuiltinType_DOUBLE, nil
	case "STRING":
		return BuiltinType_STRING, nil
	case "BINARY":
		return BuiltinType_BINARY, nil
	}
	return BuiltinType(0), fmt.Errorf("not a valid BuiltinType string")
}

func BuiltinTypePtr(v BuiltinType) *BuiltinType { return &v }
func (p *BuiltinType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = BuiltinType(result.Int64)
	return
}

func (p *BuiltinType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Annotation struct {
	Key    string   `thrift:"Key,1" frugal:"1,default,string" json:"Key"`
	Values []string `thrift:"Values,2" frugal:"2,default,list<string>" json:"Values"`
}

func NewAnnotation() *Annotation {
	return &Annotation{}
}

func (p *Annotation) InitDefault() {
	*p = Annotation{}
}

func (p *Annotation) GetKey() (v string) {
	return p.Key
}

func (p *Annotation) GetValues() (v []string) {
	return p.Values
}
func (p *Annotation) SetKey(val string) {
	p.Key = val
}
func (p *Annotation) SetValues(val []string) {
	p.Values = val
}

var fieldIDToName_Annotation = map[int16]string{
	1: "Key",
	2: "Values",
}

func (p *Annotation) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Annotation[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Annotation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Key = v
	}
	return nil
}

func (p *Annotation) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Values = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Values = append(p.Values, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Annotation) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Annotation"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Annotation) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Annotation) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Values", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
		return err
	}
	for _, v := range p.Values {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Annotation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Annotation(%+v)", *p)
}

func (p *Annotation) DeepEqual(ano *Annotation) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Values) {
		return false
	}
	return true
}

func (p *Annotation) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field2DeepEqual(src []string) bool {

	if len(p.Values) != len(src) {
		return false
	}
	for i, v := range p.Values {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type FieldDesc struct {
	Name         *string       `thrift:"Name,1,optional" frugal:"1,optional,string" json:"Name,omitempty"`
	Alias        *string       `thrift:"Alias,2,optional" frugal:"2,optional,string" json:"Alias,omitempty"`
	ID           *int32        `thrift:"ID,3,optional" frugal:"3,optional,i32" json:"ID,omitempty"`
	Required     *bool         `thrift:"Required,4,optional" frugal:"4,optional,bool" json:"Required,omitempty"`
	Optional     *bool         `thrift:"Optional,5,optional" frugal:"5,optional,bool" json:"Optional,omitempty"`
	IsException  *bool         `thrift:"IsException,6,optional" frugal:"6,optional,bool" json:"IsException,omitempty"`
	DefaultValue *string       `thrift:"DefaultValue,7,optional" frugal:"7,optional,string" json:"DefaultValue,omitempty"`
	Type         *TypeDesc     `thrift:"Type,8,optional" frugal:"8,optional,TypeDesc" json:"Type,omitempty"`
	Annotations  []*Annotation `thrift:"Annotations,9,optional" frugal:"9,optional,list<Annotation>" json:"Annotations,omitempty"`
}

func NewFieldDesc() *FieldDesc {
	return &FieldDesc{}
}

func (p *FieldDesc) InitDefault() {
	*p = FieldDesc{}
}

var FieldDesc_Name_DEFAULT string

func (p *FieldDesc) GetName() (v string) {
	if !p.IsSetName() {
		return FieldDesc_Name_DEFAULT
	}
	return *p.Name
}

var FieldDesc_Alias_DEFAULT string

func (p *FieldDesc) GetAlias() (v string) {
	if !p.IsSetAlias() {
		return FieldDesc_Alias_DEFAULT
	}
	return *p.Alias
}

var FieldDesc_ID_DEFAULT int32

func (p *FieldDesc) GetID() (v int32) {
	if !p.IsSetID() {
		return FieldDesc_ID_DEFAULT
	}
	return *p.ID
}

var FieldDesc_Required_DEFAULT bool

func (p *FieldDesc) GetRequired() (v bool) {
	if !p.IsSetRequired() {
		return FieldDesc_Required_DEFAULT
	}
	return *p.Required
}

var FieldDesc_Optional_DEFAULT bool

func (p *FieldDesc) GetOptional() (v bool) {
	if !p.IsSetOptional() {
		return FieldDesc_Optional_DEFAULT
	}
	return *p.Optional
}

var FieldDesc_IsException_DEFAULT bool

func (p *FieldDesc) GetIsException() (v bool) {
	if !p.IsSetIsException() {
		return FieldDesc_IsException_DEFAULT
	}
	return *p.IsException
}

var FieldDesc_DefaultValue_DEFAULT string

func (p *FieldDesc) GetDefaultValue() (v string) {
	if !p.IsSetDefaultValue() {
		return FieldDesc_DefaultValue_DEFAULT
	}
	return *p.DefaultValue
}

var FieldDesc_Type_DEFAULT *TypeDesc

func (p *FieldDesc) GetType() (v *TypeDesc) {
	if !p.IsSetType() {
		return FieldDesc_Type_DEFAULT
	}
	return p.Type
}

var FieldDesc_Annotations_DEFAULT []*Annotation

func (p *FieldDesc) GetAnnotations() (v []*Annotation) {
	if !p.IsSetAnnotations() {
		return FieldDesc_Annotations_DEFAULT
	}
	return p.Annotations
}
func (p *FieldDesc) SetName(val *string) {
	p.Name = val
}
func (p *FieldDesc) SetAlias(val *string) {
	p.Alias = val
}
func (p *FieldDesc) SetID(val *int32) {
	p.ID = val
}
func (p *FieldDesc) SetRequired(val *bool) {
	p.Required = val
}
func (p *FieldDesc) SetOptional(val *bool) {
	p.Optional = val
}
func (p *FieldDesc) SetIsException(val *bool) {
	p.IsException = val
}
func (p *FieldDesc) SetDefaultValue(val *string) {
	p.DefaultValue = val
}
func (p *FieldDesc) SetType(val *TypeDesc) {
	p.Type = val
}
func (p *FieldDesc) SetAnnotations(val []*Annotation) {
	p.Annotations = val
}

var fieldIDToName_FieldDesc = map[int16]string{
	1: "Name",
	2: "Alias",
	3: "ID",
	4: "Required",
	5: "Optional",
	6: "IsException",
	7: "DefaultValue",
	8: "Type",
	9: "Annotations",
}

func (p *FieldDesc) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldDesc) IsSetAlias() bool {
	return p.Alias != nil
}

func (p *FieldDesc) IsSetID() bool {
	return p.ID != nil
}

func (p *FieldDesc) IsSetRequired() bool {
	return p.Required != nil
}

func (p *FieldDesc) IsSetOptional() bool {
	return p.Optional != nil
}

func (p *FieldDesc) IsSetIsException() bool {
	return p.IsException != nil
}

func (p *FieldDesc) IsSetDefaultValue() bool {
	return p.DefaultValue != nil
}

func (p *FieldDesc) IsSetType() bool {
	return p.Type != nil
}

func (p *FieldDesc) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *FieldDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldDesc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *FieldDesc) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Alias = &v
	}
	return nil
}

func (p *FieldDesc) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ID = &v
	}
	return nil
}

func (p *FieldDesc) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Required = &v
	}
	return nil
}

func (p *FieldDesc) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Optional = &v
	}
	return nil
}

func (p *FieldDesc) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsException = &v
	}
	return nil
}

func (p *FieldDesc) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DefaultValue = &v
	}
	return nil
}

func (p *FieldDesc) ReadField8(iprot thrift.TProtocol) error {
	p.Type = NewTypeDesc()
	if err := p.Type.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *FieldDesc) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*Annotation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAnnotation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FieldDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FieldDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlias() {
		if err = oprot.WriteFieldBegin("Alias", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Alias); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FieldDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("ID", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FieldDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequired() {
		if err = oprot.WriteFieldBegin("Required", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Required); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FieldDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptional() {
		if err = oprot.WriteFieldBegin("Optional", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Optional); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *FieldDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsException() {
		if err = oprot.WriteFieldBegin("IsException", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsException); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *FieldDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultValue() {
		if err = oprot.WriteFieldBegin("DefaultValue", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefaultValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *FieldDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Type.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *FieldDesc) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *FieldDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldDesc(%+v)", *p)
}

func (p *FieldDesc) DeepEqual(ano *FieldDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Alias) {
		return false
	}
	if !p.Field3DeepEqual(ano.ID) {
		return false
	}
	if !p.Field4DeepEqual(ano.Required) {
		return false
	}
	if !p.Field5DeepEqual(ano.Optional) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsException) {
		return false
	}
	if !p.Field7DeepEqual(ano.DefaultValue) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	if !p.Field9DeepEqual(ano.Annotations) {
		return false
	}
	return true
}

func (p *FieldDesc) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldDesc) Field2DeepEqual(src *string) bool {

	if p.Alias == src {
		return true
	} else if p.Alias == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Alias, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldDesc) Field3DeepEqual(src *int32) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *FieldDesc) Field4DeepEqual(src *bool) bool {

	if p.Required == src {
		return true
	} else if p.Required == nil || src == nil {
		return false
	}
	if *p.Required != *src {
		return false
	}
	return true
}
func (p *FieldDesc) Field5DeepEqual(src *bool) bool {

	if p.Optional == src {
		return true
	} else if p.Optional == nil || src == nil {
		return false
	}
	if *p.Optional != *src {
		return false
	}
	return true
}
func (p *FieldDesc) Field6DeepEqual(src *bool) bool {

	if p.IsException == src {
		return true
	} else if p.IsException == nil || src == nil {
		return false
	}
	if *p.IsException != *src {
		return false
	}
	return true
}
func (p *FieldDesc) Field7DeepEqual(src *string) bool {

	if p.DefaultValue == src {
		return true
	} else if p.DefaultValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefaultValue, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldDesc) Field8DeepEqual(src *TypeDesc) bool {

	if !p.Type.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FieldDesc) Field9DeepEqual(src []*Annotation) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TypeDesc struct {
	Name          *string      `thrift:"Name,1,optional" frugal:"1,optional,string" json:"Name,omitempty"`
	Type          *Type        `thrift:"Type,2,optional" frugal:"2,optional,Type" json:"Type,omitempty"`
	Key           *TypeDesc    `thrift:"Key,3,optional" frugal:"3,optional,TypeDesc" json:"Key,omitempty"`
	Elem          *TypeDesc    `thrift:"Elem,4,optional" frugal:"4,optional,TypeDesc" json:"Elem,omitempty"`
	Struct        *StructDesc  `thrift:"Struct,5,optional" frugal:"5,optional,StructDesc" json:"Struct,omitempty"`
	IsRequestBase *bool        `thrift:"IsRequestBase,6,optional" frugal:"6,optional,bool" json:"IsRequestBase,omitempty"`
	Kbt           *BuiltinType `thrift:"Kbt,11,optional" frugal:"11,optional,BuiltinType" json:"Kbt,omitempty"`
	Ebt           *BuiltinType `thrift:"Ebt,12,optional" frugal:"12,optional,BuiltinType" json:"Ebt,omitempty"`
	StructIdx     *int32       `thrift:"StructIdx,13,optional" frugal:"13,optional,i32" json:"StructIdx,omitempty"`
}

func NewTypeDesc() *TypeDesc {
	return &TypeDesc{}
}

func (p *TypeDesc) InitDefault() {
	*p = TypeDesc{}
}

var TypeDesc_Name_DEFAULT string

func (p *TypeDesc) GetName() (v string) {
	if !p.IsSetName() {
		return TypeDesc_Name_DEFAULT
	}
	return *p.Name
}

var TypeDesc_Type_DEFAULT Type

func (p *TypeDesc) GetType() (v Type) {
	if !p.IsSetType() {
		return TypeDesc_Type_DEFAULT
	}
	return *p.Type
}

var TypeDesc_Key_DEFAULT *TypeDesc

func (p *TypeDesc) GetKey() (v *TypeDesc) {
	if !p.IsSetKey() {
		return TypeDesc_Key_DEFAULT
	}
	return p.Key
}

var TypeDesc_Elem_DEFAULT *TypeDesc

func (p *TypeDesc) GetElem() (v *TypeDesc) {
	if !p.IsSetElem() {
		return TypeDesc_Elem_DEFAULT
	}
	return p.Elem
}

var TypeDesc_Struct_DEFAULT *StructDesc

func (p *TypeDesc) GetStruct() (v *StructDesc) {
	if !p.IsSetStruct() {
		return TypeDesc_Struct_DEFAULT
	}
	return p.Struct
}

var TypeDesc_IsRequestBase_DEFAULT bool

func (p *TypeDesc) GetIsRequestBase() (v bool) {
	if !p.IsSetIsRequestBase() {
		return TypeDesc_IsRequestBase_DEFAULT
	}
	return *p.IsRequestBase
}

var TypeDesc_Kbt_DEFAULT BuiltinType

func (p *TypeDesc) GetKbt() (v BuiltinType) {
	if !p.IsSetKbt() {
		return TypeDesc_Kbt_DEFAULT
	}
	return *p.Kbt
}

var TypeDesc_Ebt_DEFAULT BuiltinType

func (p *TypeDesc) GetEbt() (v BuiltinType) {
	if !p.IsSetEbt() {
		return TypeDesc_Ebt_DEFAULT
	}
	return *p.Ebt
}

var TypeDesc_StructIdx_DEFAULT int32

func (p *TypeDesc) GetStructIdx() (v int32) {
	if !p.IsSetStructIdx() {
		return TypeDesc_StructIdx_DEFAULT
	}
	return *p.StructIdx
}
func (p *TypeDesc) SetName(val *string) {
	p.Name = val
}
func (p *TypeDesc) SetType(val *Type) {
	p.Type = val
}
func (p *TypeDesc) SetKey(val *TypeDesc) {
	p.Key = val
}
func (p *TypeDesc) SetElem(val *TypeDesc) {
	p.Elem = val
}
func (p *TypeDesc) SetStruct(val *StructDesc) {
	p.Struct = val
}
func (p *TypeDesc) SetIsRequestBase(val *bool) {
	p.IsRequestBase = val
}
func (p *TypeDesc) SetKbt(val *BuiltinType) {
	p.Kbt = val
}
func (p *TypeDesc) SetEbt(val *BuiltinType) {
	p.Ebt = val
}
func (p *TypeDesc) SetStructIdx(val *int32) {
	p.StructIdx = val
}

var fieldIDToName_TypeDesc = map[int16]string{
	1:  "Name",
	2:  "Type",
	3:  "Key",
	4:  "Elem",
	5:  "Struct",
	6:  "IsRequestBase",
	11: "Kbt",
	12: "Ebt",
	13: "StructIdx",
}

func (p *TypeDesc) IsSetName() bool {
	return p.Name != nil
}

func (p *TypeDesc) IsSetType() bool {
	return p.Type != nil
}

func (p *TypeDesc) IsSetKey() bool {
	return p.Key != nil
}

func (p *TypeDesc) IsSetElem() bool {
	return p.Elem != nil
}

func (p *TypeDesc) IsSetStruct() bool {
	return p.Struct != nil
}

func (p *TypeDesc) IsSetIsRequestBase() bool {
	return p.IsRequestBase != nil
}

func (p *TypeDesc) IsSetKbt() bool {
	return p.Kbt != nil
}

func (p *TypeDesc) IsSetEbt() bool {
	return p.Ebt != nil
}

func (p *TypeDesc) IsSetStructIdx() bool {
	return p.StructIdx != nil
}

func (p *TypeDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TypeDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TypeDesc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TypeDesc) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := Type(v)
		p.Type = &tmp
	}
	return nil
}

func (p *TypeDesc) ReadField3(iprot thrift.TProtocol) error {
	p.Key = NewTypeDesc()
	if err := p.Key.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TypeDesc) ReadField4(iprot thrift.TProtocol) error {
	p.Elem = NewTypeDesc()
	if err := p.Elem.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TypeDesc) ReadField5(iprot thrift.TProtocol) error {
	p.Struct = NewStructDesc()
	if err := p.Struct.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TypeDesc) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsRequestBase = &v
	}
	return nil
}

func (p *TypeDesc) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := BuiltinType(v)
		p.Kbt = &tmp
	}
	return nil
}

func (p *TypeDesc) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := BuiltinType(v)
		p.Ebt = &tmp
	}
	return nil
}

func (p *TypeDesc) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.StructIdx = &v
	}
	return nil
}

func (p *TypeDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TypeDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TypeDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TypeDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TypeDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("Key", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Key.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TypeDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetElem() {
		if err = oprot.WriteFieldBegin("Elem", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Elem.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TypeDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStruct() {
		if err = oprot.WriteFieldBegin("Struct", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Struct.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TypeDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRequestBase() {
		if err = oprot.WriteFieldBegin("IsRequestBase", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsRequestBase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TypeDesc) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetKbt() {
		if err = oprot.WriteFieldBegin("Kbt", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Kbt)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TypeDesc) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetEbt() {
		if err = oprot.WriteFieldBegin("Ebt", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Ebt)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TypeDesc) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStructIdx() {
		if err = oprot.WriteFieldBegin("StructIdx", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.StructIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TypeDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TypeDesc(%+v)", *p)
}

func (p *TypeDesc) DeepEqual(ano *TypeDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Key) {
		return false
	}
	if !p.Field4DeepEqual(ano.Elem) {
		return false
	}
	if !p.Field5DeepEqual(ano.Struct) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsRequestBase) {
		return false
	}
	if !p.Field11DeepEqual(ano.Kbt) {
		return false
	}
	if !p.Field12DeepEqual(ano.Ebt) {
		return false
	}
	if !p.Field13DeepEqual(ano.StructIdx) {
		return false
	}
	return true
}

func (p *TypeDesc) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TypeDesc) Field2DeepEqual(src *Type) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *TypeDesc) Field3DeepEqual(src *TypeDesc) bool {

	if !p.Key.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TypeDesc) Field4DeepEqual(src *TypeDesc) bool {

	if !p.Elem.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TypeDesc) Field5DeepEqual(src *StructDesc) bool {

	if !p.Struct.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TypeDesc) Field6DeepEqual(src *bool) bool {

	if p.IsRequestBase == src {
		return true
	} else if p.IsRequestBase == nil || src == nil {
		return false
	}
	if *p.IsRequestBase != *src {
		return false
	}
	return true
}
func (p *TypeDesc) Field11DeepEqual(src *BuiltinType) bool {

	if p.Kbt == src {
		return true
	} else if p.Kbt == nil || src == nil {
		return false
	}
	if *p.Kbt != *src {
		return false
	}
	return true
}
func (p *TypeDesc) Field12DeepEqual(src *BuiltinType) bool {

	if p.Ebt == src {
		return true
	} else if p.Ebt == nil || src == nil {
		return false
	}
	if *p.Ebt != *src {
		return false
	}
	return true
}
func (p *TypeDesc) Field13DeepEqual(src *int32) bool {

	if p.StructIdx == src {
		return true
	} else if p.StructIdx == nil || src == nil {
		return false
	}
	if *p.StructIdx != *src {
		return false
	}
	return true
}

type StructDesc struct {
	Name        *string       `thrift:"Name,1,optional" frugal:"1,optional,string" json:"Name,omitempty"`
	Fields      []*FieldDesc  `thrift:"Fields,2,optional" frugal:"2,optional,list<FieldDesc>" json:"Fields,omitempty"`
	Annotations []*Annotation `thrift:"Annotations,3,optional" frugal:"3,optional,list<Annotation>" json:"Annotations,omitempty"`
	UniqueKey   *string       `thrift:"UniqueKey,4,optional" frugal:"4,optional,string" json:"UniqueKey,omitempty"`
}

func NewStructDesc() *StructDesc {
	return &StructDesc{}
}

func (p *StructDesc) InitDefault() {
	*p = StructDesc{}
}

var StructDesc_Name_DEFAULT string

func (p *StructDesc) GetName() (v string) {
	if !p.IsSetName() {
		return StructDesc_Name_DEFAULT
	}
	return *p.Name
}

var StructDesc_Fields_DEFAULT []*FieldDesc

func (p *StructDesc) GetFields() (v []*FieldDesc) {
	if !p.IsSetFields() {
		return StructDesc_Fields_DEFAULT
	}
	return p.Fields
}

var StructDesc_Annotations_DEFAULT []*Annotation

func (p *StructDesc) GetAnnotations() (v []*Annotation) {
	if !p.IsSetAnnotations() {
		return StructDesc_Annotations_DEFAULT
	}
	return p.Annotations
}

var StructDesc_UniqueKey_DEFAULT string

func (p *StructDesc) GetUniqueKey() (v string) {
	if !p.IsSetUniqueKey() {
		return StructDesc_UniqueKey_DEFAULT
	}
	return *p.UniqueKey
}
func (p *StructDesc) SetName(val *string) {
	p.Name = val
}
func (p *StructDesc) SetFields(val []*FieldDesc) {
	p.Fields = val
}
func (p *StructDesc) SetAnnotations(val []*Annotation) {
	p.Annotations = val
}
func (p *StructDesc) SetUniqueKey(val *string) {
	p.UniqueKey = val
}

var fieldIDToName_StructDesc = map[int16]string{
	1: "Name",
	2: "Fields",
	3: "Annotations",
	4: "UniqueKey",
}

func (p *StructDesc) IsSetName() bool {
	return p.Name != nil
}

func (p *StructDesc) IsSetFields() bool {
	return p.Fields != nil
}

func (p *StructDesc) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *StructDesc) IsSetUniqueKey() bool {
	return p.UniqueKey != nil
}

func (p *StructDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StructDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StructDesc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *StructDesc) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Fields = make([]*FieldDesc, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewFieldDesc()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Fields = append(p.Fields, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *StructDesc) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*Annotation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAnnotation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *StructDesc) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UniqueKey = &v
	}
	return nil
}

func (p *StructDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StructDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StructDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StructDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("Fields", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return err
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *StructDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *StructDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUniqueKey() {
		if err = oprot.WriteFieldBegin("UniqueKey", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UniqueKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *StructDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructDesc(%+v)", *p)
}

func (p *StructDesc) DeepEqual(ano *StructDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Fields) {
		return false
	}
	if !p.Field3DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field4DeepEqual(ano.UniqueKey) {
		return false
	}
	return true
}

func (p *StructDesc) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *StructDesc) Field2DeepEqual(src []*FieldDesc) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *StructDesc) Field3DeepEqual(src []*Annotation) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *StructDesc) Field4DeepEqual(src *string) bool {

	if p.UniqueKey == src {
		return true
	} else if p.UniqueKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UniqueKey, *src) != 0 {
		return false
	}
	return true
}

type FunctionDesc struct {
	Name           *string       `thrift:"Name,1,optional" frugal:"1,optional,string" json:"Name,omitempty"`
	Oneway         *bool         `thrift:"Oneway,2,optional" frugal:"2,optional,bool" json:"Oneway,omitempty"`
	HasRequestBase *bool         `thrift:"HasRequestBase,3,optional" frugal:"3,optional,bool" json:"HasRequestBase,omitempty"`
	Request        *TypeDesc     `thrift:"Request,4,optional" frugal:"4,optional,TypeDesc" json:"Request,omitempty"`
	Response       *TypeDesc     `thrift:"Response,5,optional" frugal:"5,optional,TypeDesc" json:"Response,omitempty"`
	Annotations    []*Annotation `thrift:"Annotations,6,optional" frugal:"6,optional,list<Annotation>" json:"Annotations,omitempty"`
}

func NewFunctionDesc() *FunctionDesc {
	return &FunctionDesc{}
}

func (p *FunctionDesc) InitDefault() {
	*p = FunctionDesc{}
}

var FunctionDesc_Name_DEFAULT string

func (p *FunctionDesc) GetName() (v string) {
	if !p.IsSetName() {
		return FunctionDesc_Name_DEFAULT
	}
	return *p.Name
}

var FunctionDesc_Oneway_DEFAULT bool

func (p *FunctionDesc) GetOneway() (v bool) {
	if !p.IsSetOneway() {
		return FunctionDesc_Oneway_DEFAULT
	}
	return *p.Oneway
}

var FunctionDesc_HasRequestBase_DEFAULT bool

func (p *FunctionDesc) GetHasRequestBase() (v bool) {
	if !p.IsSetHasRequestBase() {
		return FunctionDesc_HasRequestBase_DEFAULT
	}
	return *p.HasRequestBase
}

var FunctionDesc_Request_DEFAULT *TypeDesc

func (p *FunctionDesc) GetRequest() (v *TypeDesc) {
	if !p.IsSetRequest() {
		return FunctionDesc_Request_DEFAULT
	}
	return p.Request
}

var FunctionDesc_Response_DEFAULT *TypeDesc

func (p *FunctionDesc) GetResponse() (v *TypeDesc) {
	if !p.IsSetResponse() {
		return FunctionDesc_Response_DEFAULT
	}
	return p.Response
}

var FunctionDesc_Annotations_DEFAULT []*Annotation

func (p *FunctionDesc) GetAnnotations() (v []*Annotation) {
	if !p.IsSetAnnotations() {
		return FunctionDesc_Annotations_DEFAULT
	}
	return p.Annotations
}
func (p *FunctionDesc) SetName(val *string) {
	p.Name = val
}
func (p *FunctionDesc) SetOneway(val *bool) {
	p.Oneway = val
}
func (p *FunctionDesc) SetHasRequestBase(val *bool) {
	p.HasRequestBase = val
}
func (p *FunctionDesc) SetRequest(val *TypeDesc) {
	p.Request = val
}
func (p *FunctionDesc) SetResponse(val *TypeDesc) {
	p.Response = val
}
func (p *FunctionDesc) SetAnnotations(val []*Annotation) {
	p.Annotations = val
}

var fieldIDToName_FunctionDesc = map[int16]string{
	1: "Name",
	2: "Oneway",
	3: "HasRequestBase",
	4: "Request",
	5: "Response",
	6: "Annotations",
}

func (p *FunctionDesc) IsSetName() bool {
	return p.Name != nil
}

func (p *FunctionDesc) IsSetOneway() bool {
	return p.Oneway != nil
}

func (p *FunctionDesc) IsSetHasRequestBase() bool {
	return p.HasRequestBase != nil
}

func (p *FunctionDesc) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FunctionDesc) IsSetResponse() bool {
	return p.Response != nil
}

func (p *FunctionDesc) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *FunctionDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FunctionDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FunctionDesc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *FunctionDesc) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Oneway = &v
	}
	return nil
}

func (p *FunctionDesc) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.HasRequestBase = &v
	}
	return nil
}

func (p *FunctionDesc) ReadField4(iprot thrift.TProtocol) error {
	p.Request = NewTypeDesc()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *FunctionDesc) ReadField5(iprot thrift.TProtocol) error {
	p.Response = NewTypeDesc()
	if err := p.Response.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *FunctionDesc) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*Annotation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAnnotation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FunctionDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FunctionDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FunctionDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FunctionDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOneway() {
		if err = oprot.WriteFieldBegin("Oneway", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Oneway); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FunctionDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasRequestBase() {
		if err = oprot.WriteFieldBegin("HasRequestBase", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasRequestBase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FunctionDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequest() {
		if err = oprot.WriteFieldBegin("Request", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Request.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FunctionDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponse() {
		if err = oprot.WriteFieldBegin("Response", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Response.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *FunctionDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *FunctionDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunctionDesc(%+v)", *p)
}

func (p *FunctionDesc) DeepEqual(ano *FunctionDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Oneway) {
		return false
	}
	if !p.Field3DeepEqual(ano.HasRequestBase) {
		return false
	}
	if !p.Field4DeepEqual(ano.Request) {
		return false
	}
	if !p.Field5DeepEqual(ano.Response) {
		return false
	}
	if !p.Field6DeepEqual(ano.Annotations) {
		return false
	}
	return true
}

func (p *FunctionDesc) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FunctionDesc) Field2DeepEqual(src *bool) bool {

	if p.Oneway == src {
		return true
	} else if p.Oneway == nil || src == nil {
		return false
	}
	if *p.Oneway != *src {
		return false
	}
	return true
}
func (p *FunctionDesc) Field3DeepEqual(src *bool) bool {

	if p.HasRequestBase == src {
		return true
	} else if p.HasRequestBase == nil || src == nil {
		return false
	}
	if *p.HasRequestBase != *src {
		return false
	}
	return true
}
func (p *FunctionDesc) Field4DeepEqual(src *TypeDesc) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FunctionDesc) Field5DeepEqual(src *TypeDesc) bool {

	if !p.Response.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FunctionDesc) Field6DeepEqual(src []*Annotation) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ServiceDesc struct {
	Name       string          `thrift:"Name,1" frugal:"1,default,string" json:"Name"`
	Functions  []*FunctionDesc `thrift:"Functions,2" frugal:"2,default,list<FunctionDesc>" json:"Functions"`
	StructList []*StructDesc   `thrift:"StructList,3" frugal:"3,default,list<StructDesc>" json:"StructList"`
}

func NewServiceDesc() *ServiceDesc {
	return &ServiceDesc{}
}

func (p *ServiceDesc) InitDefault() {
	*p = ServiceDesc{}
}

func (p *ServiceDesc) GetName() (v string) {
	return p.Name
}

func (p *ServiceDesc) GetFunctions() (v []*FunctionDesc) {
	return p.Functions
}

func (p *ServiceDesc) GetStructList() (v []*StructDesc) {
	return p.StructList
}
func (p *ServiceDesc) SetName(val string) {
	p.Name = val
}
func (p *ServiceDesc) SetFunctions(val []*FunctionDesc) {
	p.Functions = val
}
func (p *ServiceDesc) SetStructList(val []*StructDesc) {
	p.StructList = val
}

var fieldIDToName_ServiceDesc = map[int16]string{
	1: "Name",
	2: "Functions",
	3: "StructList",
}

func (p *ServiceDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServiceDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ServiceDesc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ServiceDesc) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Functions = make([]*FunctionDesc, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewFunctionDesc()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Functions = append(p.Functions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDesc) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.StructList = make([]*StructDesc, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewStructDesc()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.StructList = append(p.StructList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ServiceDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServiceDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ServiceDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Functions", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Functions)); err != nil {
		return err
	}
	for _, v := range p.Functions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ServiceDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StructList", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StructList)); err != nil {
		return err
	}
	for _, v := range p.StructList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ServiceDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceDesc(%+v)", *p)
}

func (p *ServiceDesc) DeepEqual(ano *ServiceDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Functions) {
		return false
	}
	if !p.Field3DeepEqual(ano.StructList) {
		return false
	}
	return true
}

func (p *ServiceDesc) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ServiceDesc) Field2DeepEqual(src []*FunctionDesc) bool {

	if len(p.Functions) != len(src) {
		return false
	}
	for i, v := range p.Functions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ServiceDesc) Field3DeepEqual(src []*StructDesc) bool {

	if len(p.StructList) != len(src) {
		return false
	}
	for i, v := range p.StructList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ReflectServiceReqPayload struct {
}

func NewReflectServiceReqPayload() *ReflectServiceReqPayload {
	return &ReflectServiceReqPayload{}
}

func (p *ReflectServiceReqPayload) InitDefault() {
	*p = ReflectServiceReqPayload{}
}

var fieldIDToName_ReflectServiceReqPayload = map[int16]string{}

func (p *ReflectServiceReqPayload) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReflectServiceReqPayload) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ReflectServiceReqPayload"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReflectServiceReqPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReflectServiceReqPayload(%+v)", *p)
}

func (p *ReflectServiceReqPayload) DeepEqual(ano *ReflectServiceReqPayload) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ReflectServiceRespPayload struct {
	Version     string       `thrift:"Version,1" frugal:"1,default,string" json:"Version"`
	ServiceDesc *ServiceDesc `thrift:"ServiceDesc,2" frugal:"2,default,ServiceDesc" json:"ServiceDesc"`
}

func NewReflectServiceRespPayload() *ReflectServiceRespPayload {
	return &ReflectServiceRespPayload{}
}

func (p *ReflectServiceRespPayload) InitDefault() {
	*p = ReflectServiceRespPayload{}
}

func (p *ReflectServiceRespPayload) GetVersion() (v string) {
	return p.Version
}

var ReflectServiceRespPayload_ServiceDesc_DEFAULT *ServiceDesc

func (p *ReflectServiceRespPayload) GetServiceDesc() (v *ServiceDesc) {
	if !p.IsSetServiceDesc() {
		return ReflectServiceRespPayload_ServiceDesc_DEFAULT
	}
	return p.ServiceDesc
}
func (p *ReflectServiceRespPayload) SetVersion(val string) {
	p.Version = val
}
func (p *ReflectServiceRespPayload) SetServiceDesc(val *ServiceDesc) {
	p.ServiceDesc = val
}

var fieldIDToName_ReflectServiceRespPayload = map[int16]string{
	1: "Version",
	2: "ServiceDesc",
}

func (p *ReflectServiceRespPayload) IsSetServiceDesc() bool {
	return p.ServiceDesc != nil
}

func (p *ReflectServiceRespPayload) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReflectServiceRespPayload[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReflectServiceRespPayload) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Version = v
	}
	return nil
}

func (p *ReflectServiceRespPayload) ReadField2(iprot thrift.TProtocol) error {
	p.ServiceDesc = NewServiceDesc()
	if err := p.ServiceDesc.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReflectServiceRespPayload) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReflectServiceRespPayload"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReflectServiceRespPayload) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Version", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReflectServiceRespPayload) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ServiceDesc", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ServiceDesc.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ReflectServiceRespPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReflectServiceRespPayload(%+v)", *p)
}

func (p *ReflectServiceRespPayload) DeepEqual(ano *ReflectServiceRespPayload) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.ServiceDesc) {
		return false
	}
	return true
}

func (p *ReflectServiceRespPayload) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *ReflectServiceRespPayload) Field2DeepEqual(src *ServiceDesc) bool {

	if !p.ServiceDesc.DeepEqual(src) {
		return false
	}
	return true
}

type ReflectServiceRequest struct {
	Payload []byte `thrift:"Payload,1" frugal:"1,default,binary" json:"Payload"`
}

func NewReflectServiceRequest() *ReflectServiceRequest {
	return &ReflectServiceRequest{}
}

func (p *ReflectServiceRequest) InitDefault() {
	*p = ReflectServiceRequest{}
}

func (p *ReflectServiceRequest) GetPayload() (v []byte) {
	return p.Payload
}
func (p *ReflectServiceRequest) SetPayload(val []byte) {
	p.Payload = val
}

var fieldIDToName_ReflectServiceRequest = map[int16]string{
	1: "Payload",
}

func (p *ReflectServiceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReflectServiceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReflectServiceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Payload = []byte(v)
	}
	return nil
}

func (p *ReflectServiceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReflectServiceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReflectServiceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Payload", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Payload)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReflectServiceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReflectServiceRequest(%+v)", *p)
}

func (p *ReflectServiceRequest) DeepEqual(ano *ReflectServiceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Payload) {
		return false
	}
	return true
}

func (p *ReflectServiceRequest) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Payload, src) != 0 {
		return false
	}
	return true
}

type ReflectServiceResponse struct {
	Payload []byte `thrift:"Payload,1" frugal:"1,default,binary" json:"Payload"`
}

func NewReflectServiceResponse() *ReflectServiceResponse {
	return &ReflectServiceResponse{}
}

func (p *ReflectServiceResponse) InitDefault() {
	*p = ReflectServiceResponse{}
}

func (p *ReflectServiceResponse) GetPayload() (v []byte) {
	return p.Payload
}
func (p *ReflectServiceResponse) SetPayload(val []byte) {
	p.Payload = val
}

var fieldIDToName_ReflectServiceResponse = map[int16]string{
	1: "Payload",
}

func (p *ReflectServiceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReflectServiceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReflectServiceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Payload = []byte(v)
	}
	return nil
}

func (p *ReflectServiceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReflectServiceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReflectServiceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Payload", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Payload)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReflectServiceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReflectServiceResponse(%+v)", *p)
}

func (p *ReflectServiceResponse) DeepEqual(ano *ReflectServiceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Payload) {
		return false
	}
	return true
}

func (p *ReflectServiceResponse) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Payload, src) != 0 {
		return false
	}
	return true
}

type ReflectionService interface {
	ReflectService(ctx context.Context, req *ReflectServiceRequest) (r *ReflectServiceResponse, err error)
}

type ReflectionServiceClient struct {
	c thrift.TClient
}

func NewReflectionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ReflectionServiceClient {
	return &ReflectionServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewReflectionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ReflectionServiceClient {
	return &ReflectionServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewReflectionServiceClient(c thrift.TClient) *ReflectionServiceClient {
	return &ReflectionServiceClient{
		c: c,
	}
}

func (p *ReflectionServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ReflectionServiceClient) ReflectService(ctx context.Context, req *ReflectServiceRequest) (r *ReflectServiceResponse, err error) {
	var _args ReflectionServiceReflectServiceArgs
	_args.Req = req
	var _result ReflectionServiceReflectServiceResult
	if err = p.Client_().Call(ctx, "ReflectService", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ReflectionServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ReflectionService
}

func (p *ReflectionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ReflectionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ReflectionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewReflectionServiceProcessor(handler ReflectionService) *ReflectionServiceProcessor {
	self := &ReflectionServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ReflectService", &reflectionServiceProcessorReflectService{handler: handler})
	return self
}
func (p *ReflectionServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type reflectionServiceProcessorReflectService struct {
	handler ReflectionService
}

func (p *reflectionServiceProcessorReflectService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReflectionServiceReflectServiceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReflectService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ReflectionServiceReflectServiceResult{}
	var retval *ReflectServiceResponse
	if retval, err2 = p.handler.ReflectService(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReflectService: "+err2.Error())
		oprot.WriteMessageBegin("ReflectService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReflectService", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ReflectionServiceReflectServiceArgs struct {
	Req *ReflectServiceRequest `thrift:"req,1" frugal:"1,default,ReflectServiceRequest" json:"req"`
}

func NewReflectionServiceReflectServiceArgs() *ReflectionServiceReflectServiceArgs {
	return &ReflectionServiceReflectServiceArgs{}
}

func (p *ReflectionServiceReflectServiceArgs) InitDefault() {
	*p = ReflectionServiceReflectServiceArgs{}
}

var ReflectionServiceReflectServiceArgs_Req_DEFAULT *ReflectServiceRequest

func (p *ReflectionServiceReflectServiceArgs) GetReq() (v *ReflectServiceRequest) {
	if !p.IsSetReq() {
		return ReflectionServiceReflectServiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ReflectionServiceReflectServiceArgs) SetReq(val *ReflectServiceRequest) {
	p.Req = val
}

var fieldIDToName_ReflectionServiceReflectServiceArgs = map[int16]string{
	1: "req",
}

func (p *ReflectionServiceReflectServiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReflectionServiceReflectServiceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReflectionServiceReflectServiceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReflectionServiceReflectServiceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewReflectServiceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReflectionServiceReflectServiceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReflectService_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReflectionServiceReflectServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReflectionServiceReflectServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReflectionServiceReflectServiceArgs(%+v)", *p)
}

func (p *ReflectionServiceReflectServiceArgs) DeepEqual(ano *ReflectionServiceReflectServiceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ReflectionServiceReflectServiceArgs) Field1DeepEqual(src *ReflectServiceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ReflectionServiceReflectServiceResult struct {
	Success *ReflectServiceResponse `thrift:"success,0,optional" frugal:"0,optional,ReflectServiceResponse" json:"success,omitempty"`
}

func NewReflectionServiceReflectServiceResult() *ReflectionServiceReflectServiceResult {
	return &ReflectionServiceReflectServiceResult{}
}

func (p *ReflectionServiceReflectServiceResult) InitDefault() {
	*p = ReflectionServiceReflectServiceResult{}
}

var ReflectionServiceReflectServiceResult_Success_DEFAULT *ReflectServiceResponse

func (p *ReflectionServiceReflectServiceResult) GetSuccess() (v *ReflectServiceResponse) {
	if !p.IsSetSuccess() {
		return ReflectionServiceReflectServiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ReflectionServiceReflectServiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReflectServiceResponse)
}

var fieldIDToName_ReflectionServiceReflectServiceResult = map[int16]string{
	0: "success",
}

func (p *ReflectionServiceReflectServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReflectionServiceReflectServiceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReflectionServiceReflectServiceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReflectionServiceReflectServiceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewReflectServiceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReflectionServiceReflectServiceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReflectService_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReflectionServiceReflectServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ReflectionServiceReflectServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReflectionServiceReflectServiceResult(%+v)", *p)
}

func (p *ReflectionServiceReflectServiceResult) DeepEqual(ano *ReflectionServiceReflectServiceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ReflectionServiceReflectServiceResult) Field0DeepEqual(src *ReflectServiceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
